{"version":3,"sources":["index.js"],"names":["COLORS","Square","valueStyle","this","props","value","className","onClick","onContextMenu","e","preventDefault","style","React","Component","Board","rowStyle","width","cols","rows","i","row","j","push","player","Game","M","N","mines","state","squares","initializeSquares","Array","fill","map","gameIsOver","revealCount","col","adj","set","Set","m","Math","floor","random","n","has","add","countAdjMines","end","length","slice","isValid","setState","count","square","queue","pop","console","log","getAdj","pos","alert","revealAllMines","handleClick","handleContext","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d1471236.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\n// Global variables\nconst MINE = \"*\";\nconst FLAG = \"F\";\nconst COLORS = ['white', '#1E90FF', '#228B22', '#FF0000', '#191970', '#8B0000', \n                '#3CB371', 'black', '#FFA07A']; \n\nclass Square extends React.Component {\n  render() {\n    const weight = (this.props.value === MINE || this.props.value === FLAG) ? \"bolder\" : \"normal\";\n    const valueStyle = {\n      \"fontWeight\" : weight,\n      \"color\" : COLORS[this.props.value],\n    };\n\n    return (<div className=\"square\"  \n                 onClick={() => this.props.onClick()}\n                 onContextMenu={(e) => {e.preventDefault(); this.props.onContextMenu()}} >\n              <div style={valueStyle} className=\"value\">{this.props.value}</div>\n            </div>);\n  }\n}\n\nclass Board extends React.Component {\n  render() {\n    // CSS styling for the row width\n    const rowStyle = {\n      width: this.props.cols * 34,\n    }\n\n    // Create the rendering board in an array\n    const rows = [];\n    for (let i = 0; i < this.props.rows; i++) {\n      const row = [];\n\n      for (let j = 0; j < this.props.cols; j++) {\n        row.push(<Square value={this.props.player[i][j]}\n                          onClick={() => this.props.onClick(i, j)}\n                          onContextMenu={() => this.props.onContextMenu(i, j)} />)\n      }\n\n      rows.push(<div style={rowStyle} className=\"board-row\">{row}</div>);\n    }\n\n    return(<div>\n      <div>\n        <button className=\"game-icon\"></button>\n      </div>\n      <div className=\"board\">\n        {rows}\n      </div>\n    </div>);\n  }\n}\n\nclass Game extends React.Component {\n  // Input: 2D List, Integers\n  // Output: Integer\n  // Count the number of adjacent mines in given row and col index\n  countAdjMines(squares, row, col) {\n    let adj = 0;\n\n    for (let i = row - 1; i <= row + 1; i++) {\n      for (let j = col - 1; j <= col + 1; j++) {\n        if (i >= 0 && i < this.M && j >= 0 && j < this.N && squares[i][j] === MINE) {\n          adj++;\n        }\n      }\n    }\n\n    return adj;\n  }\n\n  // Return the board (2D array) with randomized mines placed and its number clues\n  initializeSquares() {\n    // Place random mines in the board\n    // Describe number of adjacent mines for each square\n    const squares = Array(this.M).fill().map(() => Array(this.N).fill(0));\n    let set = new Set();\n\n    for (let i = 0; i < this.mines; i++) {\n      let m = Math.floor(Math.random() * this.M);\n      let n = Math.floor(Math.random() * this.N);\n\n      while (set.has(m * this.N + n)) {\n        m = Math.floor(Math.random() * this.M);\n        n = Math.floor(Math.random() * this.N);\n      }\n\n      set.add(m * this.N + n);\n      squares[m][n] = MINE;\n    }\n\n    for (let i = 0; i < this.M; i++) {\n      for (let j = 0; j < this.N; j++) {\n        if (squares[i][j] !== MINE) {\n          squares[i][j] = this.countAdjMines(squares, i, j);\n        }\n      }\n    }\n\n    return squares;\n  }\n\n\n  constructor(props) {\n    super(props);\n\n    this.M = 9;\n    this.N = 9;\n    this.mines = 10;\n\n    this.state = {\n      squares: this.initializeSquares(),\n      player: Array(this.M).fill().map(() => Array(this.N).fill(null)),\n      gameIsOver: false, \n      revealCount: 0,\n    };\n  }\n\n  // Reveal all the mines on the board to the player board\n  revealAllMines(player, squares) {\n    const end = []; // Make a copy of the player board\n    for (let i = 0; i < squares.length; i++) {\n      end[i] = player[i].slice();\n    }\n\n    // Reveal the mines on the player board\n    for (let i = 0; i < squares.length; i++) {\n      for (let j = 0; j < squares[i].length; j++) {\n        if (squares[i][j] === MINE) {\n          end[i][j] = MINE;\n        }\n      }\n    }\n\n    return end;\n  }\n\n  // Check if the row, col position is valid to reveal\n  // Within boundaries, and has not been revealed yet\n  isValid(player, row, col) {\n    return row >= 0 && row < this.M && col >= 0 && col < this.N && player[row][col] === null;\n  }\n\n  // Get all valid adjacent board positions\n  // Returns 2d Array where a pos is array [x, y]\n  getAdj(player, row, col) {\n    const adj = [];\n\n    for (let i = row - 1; i <= row + 1; i++) {\n      for (let j = col - 1; j <= col + 1; j++) {\n        if (i === row && j === col) {\n          continue;\n        }\n        if (this.isValid(player, i, j)) {\n          adj.push([i, j]);\n        }\n      }\n    }\n\n    return adj;\n  }\n\n  // Set the flag for right clicking a button\n  handleContext(i, j) {\n    if (this.state.gameIsOver) {\n      return;\n    }\n\n    const squares = this.state.squares;\n    const player = this.state.player;\n\n    if (player[i][j] === FLAG) {\n      player[i][j] = null;\n    }\n    else if (player[i][j] === null) {\n      player[i][j] = FLAG;\n    }\n\n    this.setState({\n      player: player,\n    });\n  }\n\n  // Reveal the square in the player board\n  // If the square is a mine: gameover\n  // Else: reveal everything\n  handleClick(i, j) {\n    if (this.state.gameIsOver) {\n      return;\n    }\n\n    const squares = this.state.squares;\n    const player = this.state.player;\n    let count = this.state.revealCount;\n    let square = squares[i][j];\n\n    // Do nothing if cell is flagged\n    if (player[i][j] === FLAG) {\n      return;\n    }\n\n    // Reveal all the mines if player stepped on mine\n    if (square === MINE) {\n      const end = this.revealAllMines(player, squares);\n\n      this.setState({\n        gameIsOver: true,\n        player: end,\n      });\n\n      return;\n    }\n\n    // Reveal the clicked connected squares on the player board\n    const queue = [[i, j]];\n    while (queue.length > 0) {\n      let [row, col] = queue.pop();\n\n      if (player[row][col] === null) {\n        count++;\n      }\n\n      // If 0, then expand\n      // Else, just reveal\n      player[row][col] = squares[row][col];\n      console.log(count);\n\n      if (squares[row][col] === 0) {\n        const adj = this.getAdj(player, row, col);\n        for (const pos of adj) {\n          queue.push(pos);\n        }\n      }\n    }\n\n    this.setState({\n      player: player,\n      revealCount: count,\n    });\n\n    if (count === (this.M * this.N - this.mines)) {\n      alert(\"You won!\");\n      this.setState({\n        gameIsOver: true,\n      });\n    }\n  }\n\n  render() {\n    return (<Board rows={this.M}\n                   cols={this.N}\n                   squares={this.state.squares}\n                   player={this.state.player}\n                   onClick={(i, j) => this.handleClick(i, j)} \n                   onContextMenu={(i, j) => {this.handleContext(i, j)}} />);\n  }\n}\n\nReactDOM.render(\n  <div><Game/></div>,\n  document.getElementById('root'),\n);"],"sourceRoot":""}