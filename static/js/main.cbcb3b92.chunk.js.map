{"version":3,"sources":["index.js"],"names":["Square","className","onClick","props","onContextMenu","handleContext","this","value","React","Component","Board","rows","i","row","j","push","player","cols","Game","M","N","mines","state","squares","initializeSquares","Array","fill","map","gameIsOver","revealCount","col","adj","set","Set","m","Math","floor","random","n","has","add","countAdjMines","end","length","slice","isValid","alert","count","queue","pop","console","log","getAdj","pos","setState","revealAllMines","handleClick","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.cbcb3b92.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\n\n// Minesweeper steps\n// 1. Create the board\n// 2. Handle click\n// 3. Implement game logic\n\n\n// Game Logic\n// 1. Place all the mines \n// 2. Handle Click\n\n// Handle click\n// - Expand until hits a number\n// - \n\nclass Square extends React.Component {\n  render() {\n    return (<button className=\"square\"  \n                    onClick={() => this.props.onClick()}\n                    onContextMenu={() => this.props.handleContext()} >\n              {this.props.value}\n            </button>);\n  }\n}\n\nclass Board extends React.Component {\n  render() {\n    // Create the rendering board in an array\n    const rows = [];\n    for (let i = 0; i < this.props.rows; i++) {\n      const row = [];\n\n      for (let j = 0; j < this.props.cols; j++) {\n        rows.push(<Square value={this.props.player[i][j]}\n                          onClick={() => this.props.onClick(i, j)}\n                          onContextMenu={() => this.props.handleContext(i, j)} />)\n      }\n\n      rows.push(<div className=\"board-row\">{row}</div>);\n    }\n\n    return(<div>\n      <div>\n        <button className=\"game-icon\"></button>\n      </div>\n      <div className=\"board\">\n        {rows}\n      </div>\n    </div>);\n  }\n}\n\nclass Game extends React.Component {\n\n  // Input: 2D List, Integers\n  // Output: Integer\n  // Count the number of adjacent mines in given row and col index\n  countAdjMines(squares, row, col) {\n    let adj = 0;\n\n    for (let i = row - 1; i <= row + 1; i++) {\n      for (let j = col - 1; j <= col + 1; j++) {\n        if (i >= 0 && i < this.M && j >= 0 && j < this.N && squares[i][j] === 'm') {\n          adj++;\n        }\n      }\n    }\n\n    return adj;\n  }\n\n  // Return the board (2D array) with randomized mines placed and its number clues\n  initializeSquares() {\n    // Place random mines in the board\n    // Describe number of adjacent mines for each square\n    const squares = Array(this.M).fill().map(() => Array(this.N).fill(0));\n    let set = new Set();\n\n    for (let i = 0; i < this.mines; i++) {\n      let m = Math.floor(Math.random() * this.M);\n      let n = Math.floor(Math.random() * this.N);\n\n      while (set.has(m * this.N + n)) {\n        m = Math.floor(Math.random() * this.M);\n        n = Math.floor(Math.random() * this.N);\n      }\n\n      set.add(m * this.N + n);\n      squares[m][n] = 'm';\n    }\n\n    for (let i = 0; i < this.M; i++) {\n      for (let j = 0; j < this.N; j++) {\n        if (squares[i][j] !== 'm') {\n          squares[i][j] = this.countAdjMines(squares, i, j);\n        }\n      }\n    }\n\n    return squares;\n  }\n\n\n  constructor(props) {\n    super(props);\n\n    this.M = 9;\n    this.N = 9;\n    this.mines = 10;\n\n    this.state = {\n      squares: this.initializeSquares(),\n      player: Array(this.M).fill().map(() => Array(this.N).fill(null)),\n      gameIsOver: false, \n      revealCount: 0,\n    };\n  }\n\n  // Reveal all the mines on the board to the player board\n  revealAllMines(player, squares) {\n    const end = []; // Make a copy of the player board\n    for (let i = 0; i < squares.length; i++) {\n      end[i] = player[i].slice();\n    }\n\n    // Reveal the mines on the player board\n    for (let i = 0; i < squares.length; i++) {\n      for (let j = 0; j < squares[i].length; j++) {\n        if (squares[i][j] === 'm') {\n          end[i][j] = 'm';\n        }\n      }\n    }\n\n    return end;\n  }\n\n  // Check if the row, col position is valid to reveal\n  // Within boundaries, and has not been revealed yet\n  isValid(player, row, col) {\n    return row >= 0 && row < this.M && col >= 0 && col < this.N && player[row][col] === null;\n  }\n\n  // Get all valid adjacent board positions\n  // Returns 2d Array where a pos is array [x, y]\n  getAdj(player, row, col) {\n    const adj = [];\n\n    for (let i = row - 1; i <= row + 1; i++) {\n      for (let j = col - 1; j <= col + 1; j++) {\n        if (i === row && j === col) {\n          continue;\n        }\n        if (this.isValid(player, i, j)) {\n          adj.push([i, j]);\n        }\n      }\n    }\n\n    return adj;\n  }\n\n  // Set the flag for right clicking a button\n  handleContext(i, j) {\n    if (this.state.gameIsOver) {\n      return;\n    }\n\n    alert(\"Hello!\");\n    return;\n\n    const squares = this.state.squares;\n    const player = this.state.player;\n\n    if (player[i][j] === 'F') {\n      player[i][j] = null;\n    }\n    else if (player[i][j] === null) {\n      player[i][j] = 'F';\n    }\n\n    this.setState({\n      player: player,\n    });\n  }\n\n  // Reveal the square in the player board\n  // If the square is a mine: gameover\n  // Else: reveal everything\n  handleClick(i, j) {\n    if (this.state.gameIsOver) {\n      return;\n    }\n\n    const squares = this.state.squares;\n    const player = this.state.player;\n    let count = this.state.revealCount;\n    let square = squares[i][j];\n\n    // Reveal all the mines if player stepped on mine\n    if (square === 'm') {\n      const end = this.revealAllMines(player, squares);\n\n      this.setState({\n        gameIsOver: true,\n        player: end,\n      });\n\n      return;\n    }\n\n    // Reveal all the squares on the player board\n    const queue = [[i, j]];\n    while (queue.length > 0) {\n      let [row, col] = queue.pop();\n\n      if (player[row][col] === null) {\n        count++;\n      }\n\n      // If 0, then expand\n      // Else, just reveal\n      player[row][col] = squares[row][col];\n      console.log(count);\n\n      if (squares[row][col] === 0) {\n        const adj = this.getAdj(player, row, col);\n        for (const pos of adj) {\n          queue.push(pos);\n        }\n      }\n    }\n\n    this.setState({\n      player: player,\n      revealCount: count,\n    });\n\n    if (count === (this.M * this.N - this.mines)) {\n      alert(\"You won!\");\n      this.setState({\n        gameIsOver: true,\n      });\n    }\n  }\n\n  render() {\n    return (<Board rows={this.M}\n                   cols={this.N}\n                   squares={this.state.squares}\n                   player={this.state.player}\n                   onClick={(i, j) => this.handleClick(i, j)} \n                   onContextMenu={(i, j) => this.handleContext(i, j)} />);\n  }\n}\n\nReactDOM.render(\n  <div><Game/></div>,\n  document.getElementById('root'),\n);"],"sourceRoot":""}